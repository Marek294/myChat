{"version":3,"sources":["../server/index.js"],"names":["app","server","Server","webpack","webpackMiddleware","webpackHotMiddleware","webpackConfig","process","env","NODE_ENV","trim","require","compiler","use","hot","publicPath","output","noInfo","static","get","req","res","sendFile","join","__dirname","set","PORT","listen","console","log","port","io","usersOnline","on","socket","id","user","index","username","userInformation","socketId","push","broadcast","emit","query","where","fetch","then","save","message","chat_id","reason","removedUser","splice","setTimeout"],"mappings":"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","file":"index.js","sourcesContent":["import express from 'express';\r\nimport path from 'path';\r\nimport bodyParser from 'body-parser';\r\nimport socket from 'socket.io';\r\nimport http from 'http';\r\nimport morgan from 'morgan';\r\nimport findIndex from 'lodash/findIndex';\r\n\r\nimport users from './api/users';\r\nimport auth from './api/auth';\r\nimport friends from './api/friends';\r\nimport chats from './api/chats';\r\nimport messages from './api/messages';\r\n\r\nimport User from './models/user';\r\n\r\nlet app = express();\r\nlet server = http.Server(app);\r\n\r\nlet webpack;\r\nlet webpackMiddleware;\r\nlet webpackHotMiddleware;\r\nlet webpackConfig;\r\n\r\nif(process.env.NODE_ENV.trim() === 'development') {\r\n    webpack = require('webpack');\r\n    webpackMiddleware = require('webpack-dev-middleware');\r\n    webpackHotMiddleware = require('webpack-hot-middleware');\r\n\r\n    webpackConfig = require('../webpack.config.dev');\r\n    const compiler = webpack(webpackConfig);\r\n\r\n    app.use(webpackMiddleware(compiler));\r\n    app.use(webpackHotMiddleware(compiler, {\r\n        hot: true,\r\n        publicPath: webpackConfig.output.publicPath,\r\n        noInfo: true\r\n    }));\r\n}\r\n\r\napp.use(express.static('public'));\r\napp.use(bodyParser());\r\napp.use(morgan('dev'));\r\n\r\napp.use('/api/auth',auth);\r\napp.use('/api/users',users);\r\napp.use('/api/friends',friends);\r\napp.use('/api/chats',chats);\r\napp.use('/api/messages',messages);\r\n\r\napp.get('/*', (req, res) => {\r\n    res.sendFile(path.join(__dirname, '../public/index.html'));\r\n})\r\n\r\napp.set('port', (process.env.PORT || 3000));\r\n\r\nserver.listen(app.get('port'), () => console.log('Running on port: '+port));\r\n\r\n// Setup socket\r\nvar io = socket(server, {\r\n    'pingInterval': 10*1000,\r\n    'pingTimeout': 5*1000,\r\n});\r\n\r\nlet usersOnline = [];\r\n\r\nio.on('connection', function(socket) {\r\n    console.log('Connection was made ' + socket.id);\r\n    socket.on('USER_ONLINE', (user) => {\r\n        //console.log(user);\r\n        if(user) {\r\n            const index = findIndex(usersOnline, {username: user.username});\r\n            if (index < 0) {\r\n                let userInformation = user;\r\n                userInformation.socketId = socket.id;\r\n                usersOnline.push(userInformation);\r\n                socket.broadcast.emit('SERVER_USER_ONLINE', user);\r\n                User.query({\r\n                    where: { id: user.id }\r\n                }).fetch().then(user => {\r\n                    if(user) {\r\n                        user.set('is_online', true);\r\n                        user.save();\r\n                    }\r\n                })\r\n            } else {\r\n                socket.broadcast.emit('SERVER_USER_ONLINE', user);\r\n            }\r\n        }\r\n    });\r\n\r\n    socket.on('USER_OFFLINE', function(user) {\r\n        socket.broadcast.emit('SERVER_USER_OFFLINE', user);\r\n    });\r\n\r\n    socket.on('SEND_MESSAGE', (message) => {\r\n        //console.log(message);\r\n        socket.broadcast.emit(`SERVER_NEW_MESSAGE:${message.chat_id}`, message);\r\n        socket.broadcast.emit('SERVER_NEW_MESSAGE',message.chat_id);\r\n        //:${message.chat_id}\r\n    });\r\n\r\n    socket.on('START_TYPING', (username, chat_id) => {\r\n        //console.log(message);\r\n        socket.broadcast.emit(`SERVER_START_TYPING:${chat_id}`, username);\r\n        //:${message.chat_id}\r\n    });\r\n\r\n    socket.on('STOP_TYPING', (username, chat_id) => {\r\n        //console.log(message);\r\n        socket.broadcast.emit(`SERVER_STOP_TYPING:${chat_id}`, username);\r\n        //:${message.chat_id}\r\n    });\r\n\r\n\r\n    socket.on('disconnect', function(reason) {\r\n        console.log('disconnect', socket.id);\r\n        const index = findIndex(usersOnline, { socketId: socket.id });\r\n        let removedUser;\r\n        if(index > -1) removedUser = usersOnline.splice(index,1);\r\n        setTimeout(() => {\r\n            if(removedUser) {\r\n                const index = findIndex(usersOnline, { username: removedUser[0].username });\r\n                if (index > -1) console.log('User reconnected');\r\n                else {\r\n                    console.log('user has left');\r\n                    socket.broadcast.emit('SERVER_USER_OFFLINE', removedUser[0]);\r\n                    User.query({\r\n                        where: { id: removedUser[0].id }\r\n                    }).fetch().then(user => {\r\n                        if(user) {\r\n                            user.set('is_online', false);\r\n                            user.save();\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        },5*1000)\r\n    });\r\n});\r\n\r\nexport default server;"]}