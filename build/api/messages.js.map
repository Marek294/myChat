{"version":3,"sources":["../../server/api/messages.js"],"names":["router","Router","post","req","res","body","chat_id","content","sender_id","currentUser","id","forge","save","then","json","message","catch","status","errors","err","get","p1","query","where","params","chatId","orderBy","fetchPage","page","pageSize","p2","fetch","Promise","all","values","indexOf","messages","pagination"],"mappings":";;;;;;AAAA;;;;AAEA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAIA,SAAS,kBAAQC,MAAR,EAAb;;AAEAD,OAAOE,IAAP,CAAY,GAAZ,0BAA+B,UAACC,GAAD,EAAKC,GAAL,EAAa;AAAA,oBACXD,IAAIE,IADO;AAAA,QAChCC,OADgC,aAChCA,OADgC;AAAA,QACvBC,OADuB,aACvBA,OADuB;;AAExC,QAAMC,YAAYL,IAAIM,WAAJ,CAAgBC,EAAlC;;AAEA,sBAAQC,KAAR,CAAc;AACVL,wBADU;AAEVE,4BAFU;AAGVD;AAHU,KAAd,EAIGK,IAJH,GAIUC,IAJV,CAIe,mBAAW;AACtBT,YAAIU,IAAJ,CAASC,OAAT;AACH,KAND,EAOCC,KAPD,CAOO,eAAO;AACVZ,YAAIa,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,EAAEI,QAAQC,GAAV,EAArB;AACH,KATD;AAUH,CAdD;;AAgBAnB,OAAOoB,GAAP,CAAW,gBAAX,0BAA2C,UAACjB,GAAD,EAAKC,GAAL,EAAa;AACpD,QAAMiB,KAAK,kBAAQC,KAAR,CAAc;AACTC,eAAO,EAAEjB,SAASH,IAAIqB,MAAJ,CAAWC,MAAtB;AADE,KAAd,EAEIC,OAFJ,CAEY,IAFZ,EAEkB,MAFlB,EAE0BC,SAF1B,CAEoC,EAACC,MAAMzB,IAAIqB,MAAJ,CAAWI,IAAlB,EAAwBC,UAAU,EAAlC,EAFpC,CAAX;;AAIA,QAAMC,KAAK,eAAKR,KAAL,CAAW;AACNC,eAAO,EAAEb,IAAIP,IAAIqB,MAAJ,CAAWC,MAAjB;AADD,KAAX,EAEIM,KAFJ,EAAX;;AAIAC,YAAQC,GAAR,CAAY,CAACZ,EAAD,EAAIS,EAAJ,CAAZ,EAAqBjB,IAArB,CAA0B,kBAAU;AAChC,YAAGqB,OAAO,CAAP,CAAH,EAAc;AACV,gBAAGA,OAAO,CAAP,EAAUd,GAAV,CAAc,SAAd,EAAyBe,OAAzB,CAAiChC,IAAIM,WAAJ,CAAgBC,EAAjD,IAAuD,CAAC,CAA3D,EAA8D;AAC1DN,oBAAIU,IAAJ,CAAS;AACLsB,8BAAUF,OAAO,CAAP,CADL;AAELG,gCAAYH,OAAO,CAAP,EAAUG;AAFjB,iBAAT;AAIH,aALD,MAKOjC,IAAIa,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,EAACI,QAAQ,iCAAT,EAArB;AACV,SAPD,MAOOd,IAAIa,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,EAACI,QAAQ,+BAAT,EAArB;AACV,KATD;AAUH,CAnBD;;kBAqBelB,M","file":"messages.js","sourcesContent":["import express from 'express';\r\n\r\nimport Chat from '../models/chat';\r\nimport Message from '../models/message';\r\n\r\nimport authenticate from '../middlewares/authenticate';\r\n\r\nlet router = express.Router();\r\n\r\nrouter.post('/', authenticate, (req,res) => {\r\n    const { chat_id, content } = req.body;\r\n    const sender_id = req.currentUser.id;\r\n\r\n    Message.forge({\r\n        chat_id,\r\n        sender_id,\r\n        content\r\n    }).save().then(message => {\r\n        res.json(message);\r\n    })\r\n    .catch(err => {\r\n        res.status(500).json({ errors: err });\r\n    });\r\n});\r\n\r\nrouter.get('/:chatId/:page', authenticate, (req,res) => {\r\n    const p1 = Message.query({\r\n                    where: { chat_id: req.params.chatId }\r\n                }).orderBy('id', 'DESC').fetchPage({page: req.params.page, pageSize: 15});\r\n\r\n    const p2 = Chat.query({\r\n                    where: { id: req.params.chatId }\r\n                }).fetch();\r\n\r\n    Promise.all([p1,p2]).then(values => {\r\n        if(values[1]) {\r\n            if(values[1].get('members').indexOf(req.currentUser.id) > -1) {\r\n                res.json({\r\n                    messages: values[0],\r\n                    pagination: values[0].pagination\r\n                });\r\n            } else res.status(403).json({errors: 'You have no access to this chat'});\r\n        } else res.status(403).json({errors: 'There is no chat with such id'});\r\n    });\r\n});\r\n\r\nexport default router;"]}