{"version":3,"sources":["../../server/api/friends.js"],"names":["router","Router","get","req","res","query","where","user_id2","currentUser","id","status","fetchAll","then","userIdArray","friends","map","push","friend","columns","json","users","user_id1","orWhere","post","friendEmail","body","email","fetch","user","forge","hasTimestamps","save","friendRecord","catch","success","errors","err","put","friendId","set","members","name","delete","params","parseInt","reverseMembers","qb","chats","chat","destroy"],"mappings":"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","file":"friends.js","sourcesContent":["import express from 'express';\r\n\r\nimport User from '../models/user';\r\nimport Friend from '../models/friend';\r\nimport Chat from '../models/chat';\r\n\r\nimport authenticate from '../middlewares/authenticate';\r\n\r\nlet router = express.Router();\r\n\r\nrouter.get('/pending', authenticate, (req, res) => {\r\n    Friend.query({\r\n        where: {  user_id2: req.currentUser.id,\r\n                    status: 'pending' }\r\n    }).fetchAll().then(friends => {\r\n        let userIdArray = [];\r\n\r\n        friends.map(friend => {\r\n            userIdArray.push(friend.get('user_id1'));\r\n        });\r\n\r\n        User.query(\"whereIn\", \"id\", userIdArray).fetchAll({ columns: ['id','username']}).then(users => {\r\n            res.json(users);\r\n        });\r\n\r\n    })\r\n});\r\n\r\nrouter.get('/accepted', authenticate, (req, res) => {\r\n    Friend.query({\r\n        where: {    user_id1: req.currentUser.id,\r\n            status: 'accept' },\r\n        orWhere: {  user_id2: req.currentUser.id,\r\n            status: 'accept' }\r\n    }).fetchAll().then(friends => {\r\n        let userIdArray = [];\r\n\r\n        friends.map(friend => {\r\n            if(friend.get('user_id1') == req.currentUser.id) userIdArray.push(friend.get('user_id2'));\r\n            else userIdArray.push(friend.get('user_id1'));\r\n        });\r\n\r\n        User.query(\"whereIn\", \"id\", userIdArray).fetchAll({ columns: ['id','username','is_online']}).then(users => {\r\n            res.json(users);\r\n        });\r\n\r\n    })\r\n});\r\n\r\nrouter.post('/', authenticate, (req, res) => {\r\n    const { friendEmail } = req.body;\r\n\r\n    User.query({ where: { email: friendEmail } }).fetch().then(user => {\r\n        if(user) {\r\n                if(req.currentUser.id != user.get('id')) {\r\n                    Friend.query({\r\n                        where: {\r\n                            user_id1: req.currentUser.id,\r\n                            user_id2: user.get('id')\r\n                        },\r\n                        orWhere: {\r\n                            user_id1: user.get('id'),\r\n                            user_id2: req.currentUser.id\r\n                        }\r\n                    }).fetch().then(friend => {\r\n                        if (!friend) {\r\n                            Friend.forge({\r\n                                user_id1: req.currentUser.id,\r\n                                user_id2: user.get('id'),\r\n                                status: 'pending' },{ hasTimestamps: true }).save()\r\n                                .then(friendRecord => {\r\n                                    res.json(friendRecord);\r\n                                })\r\n                                .catch(err => {\r\n                                    res.status(500).json({ success: false, errors: err });\r\n                                })\r\n                        } else res.status(403).json({errors: 'Friend request was already sended or accepted'})\r\n                    });\r\n                } else res.status(403).json({errors: 'You cannot send friend request to yourself'})\r\n        } else res.status(403).json({errors: 'There is no user with such email'})\r\n    });\r\n});\r\n\r\nrouter.put('/accept', authenticate, (req, res) => {\r\n    const { friendId } = req.body;\r\n\r\n    Friend.query({\r\n        where: {  user_id1: friendId,\r\n            user_id2: req.currentUser.id,\r\n            status: 'pending'}\r\n    }).fetch().then(friend => {\r\n        if(friend) {\r\n            friend.set('status', 'accept');\r\n            friend.save();\r\n\r\n            User.query({\r\n                where: {id: friendId}\r\n            }).fetch({columns: ['id', 'username', 'is_online']}).then(user => {\r\n                if (user) {\r\n                    const members = [req.currentUser.id, friendId];\r\n                    const name = user.get('username') + ',' + req.currentUser.get('username');\r\n                    Chat.forge({\r\n                        name: name,\r\n                        members: members\r\n                    },{ hasTimestamps: true }).save();\r\n\r\n\r\n                    res.json(user);\r\n                }\r\n                else res.status(403).json({errors: 'There is no user with such id'});\r\n            });\r\n        } else res.status(403).json({errors: 'There is no pending friend request'});\r\n    })\r\n});\r\n\r\nrouter.delete('/:friendId', authenticate, (req, res) => {\r\n    if(req.params.friendId) {\r\n        Friend.query({\r\n            where: {\r\n                user_id1: req.currentUser.id,\r\n                user_id2: req.params.friendId\r\n            },\r\n            orWhere: {\r\n                user_id1: req.params.friendId,\r\n                user_id2: req.currentUser.id\r\n            }\r\n        }).fetch().then(friend => {\r\n            if (friend) {\r\n                const members = [req.currentUser.id, parseInt(req.params.friendId)];\r\n\r\n                const reverseMembers = [parseInt(req.params.friendId), req.currentUser.id];\r\n\r\n                Chat.query(function(qb) {\r\n                    qb.where('members', '=' , members).orWhere('members', '=' , reverseMembers);\r\n                }).fetchAll().then(chats => {\r\n                    if(chats) {\r\n                        chats.map(chat => {\r\n                            chat.destroy();\r\n                        })\r\n                    }\r\n                });\r\n\r\n                friend.destroy();\r\n\r\n                User.query({\r\n                    where: {id: req.params.friendId}\r\n                }).fetch({columns: ['id', 'username']}).then(user => {\r\n                    if (user) res.json(user);\r\n                    else res.status(403).json({errors: 'There is no user with such id'});\r\n                });\r\n            } else res.status(403).json({errors: 'There is no friend with such id'});\r\n        })\r\n    } else res.status(403).json({ errors: 'There is no friendId in query'});\r\n});\r\n\r\nexport default router;"]}