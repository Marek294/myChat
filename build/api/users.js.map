{"version":3,"sources":["../../server/api/users.js"],"names":["router","Router","get","req","res","query","where","id","params","userId","fetch","then","user","json","status","errors","post","body","isValid","username","email","password","password_digest","hashSync","forge","hasTimestamps","save","token","sign","jwtSecret","set","catch","success","err","put","currentUser"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAGA,IAAIA,SAAS,kBAAQC,MAAR,EAAb;;AAEAD,OAAOE,GAAP,CAAW,UAAX,EAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjC,mBAAKC,KAAL,CAAW;AACPC,eAAO,EAAEC,IAAIJ,IAAIK,MAAJ,CAAWC,MAAjB;AADA,KAAX,EAEGC,KAFH,GAEWC,IAFX,CAEgB,gBAAQ;AACpB,YAAGC,IAAH,EAASR,IAAIS,IAAJ,CAASD,IAAT,EAAT,KACKR,IAAIU,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB,EAAEE,QAAQ,+BAAV,EAArB;AACR,KALD;AAOH,CARD;;AAUAf,OAAOgB,IAAP,CAAY,GAAZ,EAAiB,UAACb,GAAD,EAAMC,GAAN,EAAc;AAAA,4BACD,sBAAiBD,IAAIc,IAArB,CADC;AAAA,QACrBF,MADqB,qBACrBA,MADqB;AAAA,QACbG,OADa,qBACbA,OADa;;AAE3B,QAAGA,OAAH,EAAY;AAAA,wBAC8Bf,IAAIc,IADlC;AAAA,YACAE,QADA,aACAA,QADA;AAAA,YACUC,KADV,aACUA,KADV;AAAA,YACiBC,QADjB,aACiBA,QADjB;;AAER,YAAMC,kBAAkB,iBAAOC,QAAP,CAAgBF,QAAhB,EAAyB,EAAzB,CAAxB;;AAEA,uBAAKG,KAAL,CAAW,EAAEL,kBAAF,EAAYC,YAAZ,EAAmBE,gCAAnB,EAAX,EAAgD,EAAEG,eAAe,IAAjB,EAAhD,EAAyEC,IAAzE,GACKf,IADL,CACU,gBAAQ;AACV,gBAAMgB,QAAQ,uBAAIC,IAAJ,CAAS;AACnBrB,oBAAIK,KAAKV,GAAL,CAAS,IAAT,CADe;AAEnBiB,0BAAUP,KAAKV,GAAL,CAAS,UAAT;AAFS,aAAT,EAGX,iBAAO2B,SAHI,CAAd;;AAKAjB,iBAAKkB,GAAL,CAAS,WAAT,EAAsB,IAAtB;AACAlB,iBAAKc,IAAL;;AAEAtB,gBAAIS,IAAJ,CAAS,EAAEc,OAAOA,KAAT,EAAT;AACH,SAXL,EAYKI,KAZL,CAYW,eAAO;AACV3B,gBAAIU,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB,EAAEmB,SAAS,KAAX,EAAkBjB,QAAQkB,GAA1B,EAArB;AACH,SAdL;AAgBH,KApBD,MAoBO7B,IAAIU,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB,EAAEmB,SAAS,KAAX,EAAkBjB,QAAQA,MAA1B,EAArB;AACV,CAvBD;;AAyBAf,OAAOkC,GAAP,CAAW,UAAX,0BAAqC,UAAC/B,GAAD,EAAMC,GAAN,EAAc;AAC/C,mBAAKC,KAAL,CAAW;AACPC,eAAO,EAAEC,IAAIJ,IAAIgC,WAAJ,CAAgB5B,EAAtB;AADA,KAAX,EAEGG,KAFH,GAEWC,IAFX,CAEgB,gBAAQ;AACpB,YAAGC,IAAH,EAAS;AACLA,iBAAKkB,GAAL,CAAS,WAAT,EAAsB,KAAtB;AACAlB,iBAAKc,IAAL;AACAtB,gBAAIS,IAAJ,CAAS,EAACmB,SAAS,IAAV,EAAT;AACH,SAJD,MAIO5B,IAAIU,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB,EAAEE,QAAQ,+BAAV,EAArB;AACV,KARD;AASH,CAVD;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;kBAEef,M","file":"users.js","sourcesContent":["import express from 'express';\r\nimport bcrypt from 'bcrypt';\r\nimport signupValidation from '../validations/signup';\r\nimport jwt from 'jsonwebtoken';\r\nimport config from '../config';\r\nimport authenticate from '../middlewares/authenticate';\r\n\r\nimport User from '../models/user';\r\n\r\n\r\nlet router = express.Router();\r\n\r\nrouter.get('/:userId', (req, res) => {\r\n    User.query({\r\n        where: { id: req.params.userId }\r\n    }).fetch().then(user => {\r\n        if(user) res.json(user);\r\n        else res.status(403).json({ errors: 'There is no user with such id'});\r\n    })\r\n\r\n});\r\n\r\nrouter.post('/', (req, res) => {\r\n    let { errors, isValid } = signupValidation(req.body);\r\n    if(isValid) {\r\n        const { username, email, password } = req.body;\r\n        const password_digest = bcrypt.hashSync(password,10);\r\n\r\n        User.forge({ username, email, password_digest },{ hasTimestamps: true }).save()\r\n            .then(user => {\r\n                const token = jwt.sign({\r\n                    id: user.get('id'),\r\n                    username: user.get('username')\r\n                }, config.jwtSecret);\r\n\r\n                user.set('is_online', true);\r\n                user.save();\r\n\r\n                res.json({ token: token });\r\n            })\r\n            .catch(err => {\r\n                res.status(500).json({ success: false, errors: err });\r\n            })\r\n\r\n    } else res.status(403).json({ success: false, errors: errors });\r\n});\r\n\r\nrouter.put('/offline', authenticate, (req, res) => {\r\n    User.query({\r\n        where: { id: req.currentUser.id }\r\n    }).fetch().then(user => {\r\n        if(user) {\r\n            user.set('is_online', false);\r\n            user.save();\r\n            res.json({success: true});\r\n        } else res.status(403).json({ errors: 'There is no user with such id'});\r\n    })\r\n});\r\n\r\n// router.delete('/:id', authenticate, (req, res) => {\r\n//     User.query({\r\n//         where: { id: req.params.id }\r\n//     }).fetch().then(user => {\r\n//         if(user) {\r\n//             user.destroy();\r\n//             res.json(user);\r\n//         } else res.status(404).json({ errors: 'There is no user with such id'});\r\n//     })\r\n// });\r\n\r\nexport default router;"]}