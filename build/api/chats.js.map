{"version":3,"sources":["../../server/api/chats.js"],"names":["router","Router","get","req","res","member","push","currentUser","id","query","qb","where","fetchAll","then","chats","p2","map","index","chat","indexOf","displayName","substr","length","set","p","userId","fetch","Promise","all","i","users","json","params","withRelated","status","errors","members","parseInt","friendId","reverseMembers","orWhere"],"mappings":"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","file":"chats.js","sourcesContent":["import express from 'express';\r\n\r\nimport Chat from '../models/chat';\r\nimport User from '../models/user';\r\n\r\nimport authenticate from '../middlewares/authenticate';\r\n\r\nlet router = express.Router();\r\n\r\nrouter.get('/all', authenticate, (req,res) => {\r\n    let member = [];\r\n    member.push(req.currentUser.id);\r\n\r\n    Chat.query( qb => {\r\n        qb.where('members', '@>', member);\r\n    }).fetchAll().then(chats => {\r\n        if(chats) {\r\n            let p2 = chats.map(chat => {\r\n                const index = chat.get('name').indexOf(req.currentUser.get('username'));\r\n                if(index > -1) {\r\n                    let displayName = chat.get('name');\r\n                    index > 0   ? displayName = displayName.substr(0,index-1) + displayName.substr(index+req.currentUser.get('username').length,displayName.length)\r\n                                : displayName = displayName.substr(req.currentUser.get('username').length+1,displayName.length);\r\n\r\n                    chat.set('name', displayName);\r\n\r\n                    let p = chat.get('members').map(userId => {\r\n                        return User.query({\r\n                            where: { id: userId }\r\n                        }).fetch();\r\n                    });\r\n\r\n                    chat.set('online', false);\r\n                    return Promise.all(p).then(users => {\r\n                        for(let i = 0; i < users.length; i++) {\r\n                            if((users[i].get('id') != req.currentUser.get('id')) && users[i].get('is_online')) {\r\n                                chat.set('online', true);\r\n                                break;\r\n                            }\r\n                        }\r\n                    })\r\n\r\n                }\r\n\r\n            });\r\n\r\n            Promise.all(p2).then(() => {\r\n                res.json(chats)\r\n            });\r\n        }\r\n    })\r\n});\r\n\r\nrouter.get('/:id', authenticate, (req,res) => {\r\n    Chat.query({\r\n        where: { id: req.params.id }\r\n    }).fetch({withRelated: ['messages']}).then(chat => {\r\n        if(chat) {\r\n            if(chat.get('members').indexOf(req.currentUser.id) > -1) {\r\n                res.json(chat);\r\n            } else res.status(403).json({errors: 'You have no access to this chat'});\r\n        } else res.status(403).json({errors: 'There is no chat with such id'});\r\n    })\r\n});\r\n\r\nrouter.get('/:friendId', authenticate, (req,res) => {\r\n    const members = [req.currentUser.id, parseInt(req.params.friendId)];\r\n\r\n    const reverseMembers = [parseInt(req.params.friendId), req.currentUser.id];\r\n\r\n    Chat.query( qb => {\r\n        qb.where('members', '=' , members).orWhere('members', '=' , reverseMembers);\r\n    }).fetch({withRelated: ['messages']}).then(chat => {\r\n        if(chat) {\r\n            const index = chat.get('name').indexOf(req.currentUser.get('username'));\r\n            if(index > -1) {\r\n                let displayName = chat.get('name');\r\n                index > 0   ? displayName = displayName.substr(0,index-1) + displayName.substr(index+req.currentUser.get('username').length,displayName.length)\r\n                    : displayName = displayName.substr(req.currentUser.get('username').length+1,displayName.length);\r\n\r\n                chat.set('name', displayName);\r\n            }\r\n\r\n            res.json(chat);\r\n        } else res.status(403).json({errors: 'There is no chat with this friend'});\r\n    })\r\n});\r\n\r\nexport default router;"]}